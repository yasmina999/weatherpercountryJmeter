<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan_capitals_json" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="restCountires request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">restcountries.eu</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">rest/v2/all</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="appartmentName" elementType="Argument">
                <stringProp name="Argument.name">appartmentName</stringProp>
                <stringProp name="Argument.value">${__RandomString(5,villa,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appartmentPrice" elementType="Argument">
                <stringProp name="Argument.name">appartmentPrice</stringProp>
                <stringProp name="Argument.value">${__Random(10000,999999,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appartmentAddress" elementType="Argument">
                <stringProp name="Argument.name">appartmentAddress</stringProp>
                <stringProp name="Argument.value">${__RandomString(10,qwertypoiu dss A pdcx,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appartmentSize" elementType="Argument">
                <stringProp name="Argument.name">appartmentSize</stringProp>
                <stringProp name="Argument.value">${__Random(30,1000,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="appartmentType" elementType="Argument">
                <stringProp name="Argument.name">appartmentType</stringProp>
                <stringProp name="Argument.value">${__RandomFromMultipleVars(Sale|Rental|Both,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="constructionDate" elementType="Argument">
                <stringProp name="Argument.name">constructionDate</stringProp>
                <stringProp name="Argument.value">${__RandomDate(yyyy-MM-dd,,2030-02-15,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].name;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable">name</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="capital_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">capital</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].capital;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currency_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">currency</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].currencies[*].code;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currency_Symbol_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">currency_symbol</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].currencies[*].symbol;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="iso_code_1_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">iso_code_1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].languages[*].iso639_1;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="iso_code_2_extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">iso_code_2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].languages[*].iso639_2;</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">;</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">C:\tools\apache-jmeter-4.0\bin\allCountries.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">name,capital,currency,currency_symbol,iso_code_1,iso_code_2</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="maximumValue">2030-02-15</stringProp>
            <stringProp name="minimumValue">1981-02-15</stringProp>
            <stringProp name="outputFormat">${__RandomDate(yyyy-MM-dd,,2030-02-15,,)}</stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">constructionDate</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Data generation" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
 try {


            if (new File(&quot;./allCountries.csv&quot;).exists()) {
            	 
            	void addDay(Calendar calendar, int offsetDay) {
                     calendar.add(Calendar.DAY_OF_YEAR, offsetDay);
            	}

            	// preparing manually random values for dates, as it&apos;s defined in userDefinded vbls with random data, but keeps it static
            	  Random rand = new Random();
                Calendar calendar = Calendar.getInstance();
               
                
                LineNumberReader lineReader = new LineNumberReader(new FileReader(new File(&quot;./allCountries.csv&quot;)));
                String line = null;

                FileWriter fstream = new FileWriter(&quot;./appartments_country.csv&quot;, false);
                BufferedWriter out = new BufferedWriter(fstream);
                int count = 1;
                String[] query = new String[]{&quot;flat&quot;, &quot;villa&quot;, &quot;hotel&quot;};
                String[] query2 = new String[]{&quot;street x&quot;, &quot;Avenue y&quot;, &quot;Zone z&quot;};
                String[] query3 = new String[]{&quot;Sale&quot;, &quot;Rental&quot;, &quot;Both&quot;};
                Random random = new Random();
                int i = random.nextInt(query.length);
                int j = random.nextInt(query2.length);
                int k = random.nextInt(query3.length);
                vars.put(&quot;appartmentType&quot;, String.valueOf(query3[k]));
                vars.put(&quot;appartmentAddress&quot;, String.valueOf(query2[j]));
                while ((line = lineReader.readLine()) != null) {
                    String[] val = line.split(&quot;;&quot;);
                  
                    if (!val[1].toString().equals(&quot;&quot;)) {

                        for (int i = 1; i &lt; rand.nextInt(5); ++i) {
                        	 addDay(calendar, rand.nextInt(5));
                SimpleDateFormat dt1 = new SimpleDateFormat(&quot;yyyyy-MM-dd&quot;);
                log.info(&quot;fecha &quot;+String.valueOf(dt1.format(calendar.getTime())));                       
                vars.put(&quot;constructionDate&quot;, String.valueOf(dt1.format(calendar.getTime())));


                            out.write(val[1].toString() + &quot;;&quot; +
                                    vars.get(&quot;appartmentName&quot;).toString() + &quot;;&quot; +
                                    val[0].toString() + &quot;;&quot; +
                                    vars.get(&quot;currency_&quot; + count).toString() + &quot;;&quot; +
                                    vars.get(&quot;currency_symbol_&quot; + count).toString() + &quot;;&quot; +
                                    vars.get(&quot;iso_code_1_&quot; + count).toString() + &quot;;&quot; +
                                    vars.get(&quot;iso_code_2_&quot; + count).toString() + &quot;;&quot; +
                                    vars.get(&quot;appartmentAddress&quot;).toString() + &quot;;&quot; +
                                    vars.get(&quot;appartmentType&quot;).toString() + &quot;;&quot; +
                                    String.valueOf(vars.get(&quot;appartmentSize&quot;).toString() + &quot;;&quot;) +
                                    String.valueOf(vars.get(&quot;constructionDate&quot;).toString() + &quot;;&quot;) +
                                    String.valueOf(vars.get(&quot;appartmentPrice&quot;) + &quot;;&quot;));
                            out.write(&quot;\n&quot;);
                            int i = random.nextInt(query.length);
                            int j = random.nextInt(query2.length);
                            int k = random.nextInt(query3.length);
                            vars.put(&quot;appartmentName&quot;, String.valueOf(query[i]) + String.valueOf(rand.nextInt(9)));
                            vars.put(&quot;appartmentAddress&quot;, String.valueOf(query2[j]));
                            vars.put(&quot;appartmentType&quot;, String.valueOf(query3[k]));
                            vars.put(&quot;appartmentPrice&quot;, String.valueOf(rand.nextInt(999999)));
                            vars.put(&quot;appartmentSize&quot;, String.valueOf(rand.nextInt(1001)));

                        }
                    }

                    count++;
                }
                lineReader.close();
                out.close();

            } else {
                
                log.info(&quot;**** File does not exists!&quot;);
            }
        } catch (Exception ex) {

            throw ex;
        }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
